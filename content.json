{"meta":{"title":"Tiny熊的博客","subtitle":"记录我的学习与思考","description":"关注领域：个人成长、思考、总结、区块链，Linux，移动开发，Mac","author":"Tiny熊","url":"http://tinyxiong.com"},"pages":[{"title":"文章分类","date":"2017-12-09T12:54:53.000Z","updated":"2017-12-09T13:13:16.000Z","comments":false,"path":"categories/index.html","permalink":"http://tinyxiong.com/categories/index.html","excerpt":"","text":"哈哈哈哈"},{"title":"文章标签","date":"2017-12-09T12:46:05.000Z","updated":"2017-12-09T13:13:50.000Z","comments":false,"path":"tags/index.html","permalink":"http://tinyxiong.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"预言机的思考","slug":"oracle","date":"2019-03-28T15:53:00.000Z","updated":"2019-03-29T14:21:31.126Z","comments":true,"path":"oracle/","link":"","permalink":"http://tinyxiong.com/oracle/","excerpt":"","text":"我们知道所有的数据在经过节点的验证之后，才能上链。而节点验证达成共识的一个条件是：验证时数据输入是相同的。这让区块链上只能使用链内的确定性的数据，因为链外的数据没法保证在不同的时间进行验证时数据的一致性。 这让区块链和我们的现实世界产生了割裂。 预言机就是这样一座桥（怎么总是喜欢用桥来比喻？），联通着区块链和现实世界。 如果区块链（智能合约）想要基于某个外部状态做些事情（比如Dai项目依靠外部的币价信息），它不能主动去拿外部数据，而是要依靠预言机把外部数据以交易的形式发送进来，从而把一个不确定的数据转化为一个确定的输入。 好了，问题来了，我们说区块链创造了信任，就是因为去中介，现在又引入一个预言机中介，好像是一个讽刺，如何来保证预言机没有作恶呢（加入外部数据是真实的，指如何确保预言机不会篡改外部数据）？ 这也是为什么说区块链还在早期，成熟的预言机机制会极大的促进区块链的发展，不少团队正在探索去中心化预言机，未来值得期待。","categories":[{"name":"思考","slug":"思考","permalink":"http://tinyxiong.com/categories/思考/"}],"tags":[{"name":"预言机","slug":"预言机","permalink":"http://tinyxiong.com/tags/预言机/"}]},{"title":"再聊聊跨链","slug":"cross_chain","date":"2019-03-28T15:53:00.000Z","updated":"2019-03-29T14:20:33.651Z","comments":true,"path":"cross_chain/","link":"","permalink":"http://tinyxiong.com/cross_chain/","excerpt":"","text":"再聊聊跨链：Polkadot和Cosmos 两个跨链的头部项目，他们都认为自己是下一代的互联网，他们构建的像今天TCP/IP协议一样的协议。 虽然我很关注这两个项目， 不过也引发我的思考， 我们是否会那么需要跨链。如果把链比作一座山，跨链就是在山和山之间修桥， 跨链的前提是已经有很多的山了， 在这个山的人想去另一座山。 与跨链不同，侧链可以认为是修建索道。跨链 侧链看起来是类似的事情，他们的思路却完全不同， 在跨链中，跨链本身的链是主干，所接入的链都是分支， 而侧链自己是旁支，他需要接入一个主干。 在跨链看来未来可能有一两座大大的山，山里已经有完整的生态，可以自由的玩耍，串门只要有索道就可以。 短期来看，侧链较容易落地，不过区块链本身还在早期，未来是怎样，我们先交给时间。","categories":[{"name":"思考","slug":"思考","permalink":"http://tinyxiong.com/categories/思考/"}],"tags":[{"name":"跨链","slug":"跨链","permalink":"http://tinyxiong.com/tags/跨链/"}]},{"title":"思考：一个人在情况下成长最快？","slug":"stay-hungery","date":"2019-03-23T15:53:00.000Z","updated":"2019-03-29T14:20:43.528Z","comments":true,"path":"stay-hungery/","link":"","permalink":"http://tinyxiong.com/stay-hungery/","excerpt":"","text":"大家思考下 一个人在情况下成长最快呢？ 是当一个人保持空杯心态、好奇心态时 很多时候是我们的自满自以为是，阻碍了我们学习进步。 我以前对EOS有一些偏见，认为EOS太多中心化，让我错失很多几乎去学习了解它，也让登链学院错过一些机会。 登链学院 是我创办的一家区块链培训教育机构 我也经常给一些朋友、同事、学员一些学习建议学习某项技术，经常遇到对方回答如：这项技术过时了、没前途等等。 当我们对一个事物一上来就用一个筛子过滤一下（用自己以为的经验进行判断），我们会错失很多。 任正非的”先僵化，后优化，再固化“， 僵化对比我们好的技术照搬全抄，对的错的一起抄，在理解吸收之后在优化。 如果我们一开始就对事物加以判断以做区分，意味着我们失去理解他的机会。 与各位共勉。 思考思考、在思考，我们是否保持了足够的空杯心态 听前老板傅盛课程有感","categories":[{"name":"思考","slug":"思考","permalink":"http://tinyxiong.com/categories/思考/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://tinyxiong.com/tags/成长/"}]},{"title":"学习跨链","slug":"sidechain","date":"2019-03-22T15:00:10.000Z","updated":"2019-03-29T14:21:47.815Z","comments":true,"path":"sidechain/","link":"","permalink":"http://tinyxiong.com/sidechain/","excerpt":"","text":"利用中介 跨链如何把你手里 的1 BTC 换成 25 ETH， 对于你来说就是把 比特币的资产转移到了 以太坊，最简单直接的方法就是 找一个中介，他收到了 1 BTC 之后转给你 25 ETH，这就完成了跨链。 哈哈，简单粗暴，很熟悉吧，交易所就是干这个事，缺点很明显，就是中心化。 这种方式有一个词，叫： 公证人机制（Notary schemes）或见证人机制，是不是一下子高大上了。 其实 Ripple 就是用类似这种方式来跨链的。 哈希时间锁定（Hash-locking） 利用中介很容易发生一个问题， 中介收到我们的BTC后就跑路了， 不给我们打ETH。 哈希时间锁定（HTLC）最早出现在比特币的闪电网络，支持跨链资产进行原子交换。 它用到了两把锁：哈希锁和时间锁。迫使资产的接收方在期限内确定收款并产生一种收款证明给付款方，否则资产会归还给付款方。 用一个例子来阐述如何使用哈希时间锁定进行跨链的原子资产交换，假设Alice和Bob有资产交换的需求，Alice想用1个BTC和Bob换20个ETH. 那么首先需要在两条链上设置哈希时间锁定合约，然后执行如下步骤： Alice 随机构建一个字符串s，并计算出其哈希 h = hash(s)； Alice 将h发送给Bob的合约； Alice锁定自己的1个BTC资产，并设置一个较长的锁定时间t1, 并设置了获取该BTC的一个条件：谁能够提供h的原始值s就可以得到该BTC; Bob观察到Alice 合约中锁定了一个BTC, 然后Bob锁定自己的20个ETH资产，并设置一个相对较短的锁定时间t2, t2 &lt; t1, Bob也设置了同样获取条件（谁提供h的原始值s就可以获取20个ETH）； Alice将自己最初生成的字符串s 发送到Bob的合约里取得了20个ETH; Bob观察到步骤5中Alice的s值，将其发送给Alice的合约成功获取1个BTC; 至此Alice和Bob完成了资产的交换。 哈希时间锁定合约也有一些约束条件： 时间设置需要有时间差， 只适合偏资产或者关键数据的交换，在支付领域较多，例如闪电网络、雷电网络以及跨链资产转移协议Interledger等。 明天在介绍 侧链/中继链 侧链/中继链（Sidechains / Relays）侧链是指完全拥有某链的功能的另一条区块链，侧链可以读取和验证主链上的信息。主链不知道侧链的存在，由侧链主动感知主链信息并进行相应的动作。而中继链则是侧链和公证人机制的结合体，中继链具有访问需要和验证进行互操作的链的关键信息并对两条链的跨链消息进行转移。从这个角度看中继链也是一种去中心的公证人机制。 https://tech.hyperchain.cn/blockchain-interoperability/?from=timeline","categories":[{"name":"学习","slug":"学习","permalink":"http://tinyxiong.com/categories/学习/"}],"tags":[{"name":"侧链","slug":"侧链","permalink":"http://tinyxiong.com/tags/侧链/"}]},{"title":"Cosmos & Tendermint","slug":"cosmos_tendermint","date":"2019-03-15T14:59:27.000Z","updated":"2019-03-21T15:21:10.197Z","comments":true,"path":"cosmos_tendermint/","link":"","permalink":"http://tinyxiong.com/cosmos_tendermint/","excerpt":"","text":"Cosmos 和 Polkadot 的设计有很多相似之处，还有国内团队AckBlock的Forge，今天好好看了看Cosmos cosmos &amp; tendermintCosmos的人认为： 很多人（组织）会想拥有一条属于自己的链，通过 tendermint通用的区块链开发框架，快速定制开发自己的链。 一条链包括3个部分的话：网络层，共识层，应用层。 tendermint 包含两部分： tendermint core 把共识层和网络层封装在了一起，共识层是拜占庭共识算法+pos。 ABCI协议，Application Blockchain Interface， tendermint core 引擎和上面开发者自定义的应用层之间的接口。 Cosmos SDK 是实现ABCI协议，如 区块链中的一些通用模块标准化，这些通用模块覆盖了大部分应用层需要具备的功能，比如：staking（抵押机制）、slashing（惩罚机制）、IBC（跨链功能），账户accounts、治理、奖励&amp;手续费等。 跨链 有很多条链的时候，跨链问题就来了， comos 抽象出来一个 机制抽象 IBC协议，Inter-Blockchain Communication。IBC就像一座桥，让不同的链可以互相连通（支持简单的价值传递）。 有了IBC这个跨链通信协议，我们如何构造一个互联互通的区块链网络？ 两两相连 单连跨链验证 cosmos采用另一种办法跨链。他们采用一种模块化的架构来建立整个区块链网络的连接，这个架构包括两个组成部分：一个叫hub，一个叫zone。 后续进一步讲究 参考Cosmos上线主网了，但是“为什么需要跨链”依然有待探寻","categories":[{"name":"学习","slug":"学习","permalink":"http://tinyxiong.com/categories/学习/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://tinyxiong.com/tags/学习/"}]},{"title":"Uniswap 学习记录","slug":"learn_uniswap","date":"2019-03-15T14:59:27.000Z","updated":"2019-03-21T15:16:39.576Z","comments":true,"path":"learn_uniswap/","link":"","permalink":"http://tinyxiong.com/learn_uniswap/","excerpt":"","text":"Uniswap 协议 定义Uniswap 是一个以太坊上运行的去中心化交易所协议，能让 ETH 和 ERC20 代币之间的兑换变得非常简易。 机制Uniswap 用一个被称为“自动做市商”（AMM）的模型，根据可用的流动性自动调整兑换比率。 Uniswap 使用了一个由 Vitalik 提出的“恒定乘积做市商”的模型，能让在合约中锁定的两种资产之间进行交易。 “恒定乘积做市商”使用一个非常简单的公式 x*y=k，其中 x 是 ETH，y 是 ERC20 代币，k 是恒量。 如果你将所有的 ETH 卖给 Uniswap 合约，仍还有很少量的 ERC20 代币可供购买。例如，如果有人向合约出售了1个 ETH，现在总共有11个 ETH。为了保持 k 恒定，就需要有 500/11 = 45.45 个 ERC20 代币。所以你要给发送 50 - 45.45 = 4.55 个 ERC20 代币给买家。 成为流动性提供者时，同时存入 ETH 和 ERC20 代币，流动性提供者可以得到交易分成。 Uniswap和 Bancor 的区别Uniswap和 Bancor 的区别： 其他目前 Uniswap 流动性池中有2万个ETH， Uniswap代币兑换是及时的。Uniswap合约使用Vyper开发，所有内容只有创始人（Hayden）一个全职开发者。 参考https://mp.weixin.qq.com/s/15UWTVRHVLU3DCyR48zh_w","categories":[{"name":"学习","slug":"学习","permalink":"http://tinyxiong.com/categories/学习/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://tinyxiong.com/tags/学习/"}]},{"title":"重新启用网站，记录每日思考","slug":"new-start-day1","date":"2019-03-10T06:20:28.000Z","updated":"2019-03-21T15:21:34.473Z","comments":true,"path":"new-start-day1/","link":"","permalink":"http://tinyxiong.com/new-start-day1/","excerpt":"","text":"昨天我加入了一个每日阅读特训营，强迫自己每日阅读进行总结，其实每日阅读一直都有，不过总结做的少，这是一个go开发者组织的活动， 也强迫自己学习下Go。 今日学习： 关于学习 陈浩在ARTS 打卡读者群召集令，写到： 学习没有捷径、是逆人性的，需要长期付出实际行动和精力。听别人讲、看别人的书，远不如自己思辨、践行、总结和归纳。 过去两年自己也是在写技术博客，加上创业做教育培训， 自己深入体会。","categories":[{"name":"思考","slug":"思考","permalink":"http://tinyxiong.com/categories/思考/"}],"tags":[{"name":"思考","slug":"思考","permalink":"http://tinyxiong.com/tags/思考/"}]},{"title":"一招解决无法连接github问题","slug":"fix_connect_github","date":"2018-03-16T08:36:36.000Z","updated":"2018-03-18T15:23:48.770Z","comments":true,"path":"fix_connect_github/","link":"","permalink":"http://tinyxiong.com/fix_connect_github/","excerpt":"因为大家都知道的原因，有时github没法连接上，本文给大家一个解决办法。","text":"因为大家都知道的原因，有时github没法连接上，本文给大家一个解决办法。 估计今天很多同学遇到了阿里云无法连github的问题。想必遇到这个问题的你一定很恼火，过来看看吧，本文很短，但很实用。 前提备一台香港服务器（可访问github的服务器都行） 设置Socks 代理1$ ssh -D 1080 hk_ip 这条命令在无法连接github的主机上执行。hk_ip 为hk服务器ip 给github 配置代理在无法连接github的主机上，打开.ssh/config, 添加一下记录12Host github.com ProxyCommand=nc -X 5 -x localhost:1080 %h %p 好了， 执行下git pull 试试看，已经可以成功访问github了。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/categories/Linux/"},{"name":"github","slug":"Linux/github","permalink":"http://tinyxiong.com/categories/Linux/github/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/tags/Linux/"},{"name":"ssh","slug":"ssh","permalink":"http://tinyxiong.com/tags/ssh/"}]},{"title":"程序员如何提高工作效率","slug":"about-effciency","date":"2017-12-14T13:10:47.000Z","updated":"2017-12-14T14:57:30.000Z","comments":true,"path":"about-effciency/","link":"","permalink":"http://tinyxiong.com/about-effciency/","excerpt":"很多人问我，你怎么效率那么高，工作很忙，又要带娃，还写博客，还有时间运动。今天就写写这个话题：程序员如何提高工作效率","text":"很多人问我，你怎么效率那么高，工作很忙，又要带娃，还写博客，还有时间运动。今天就写写这个话题：程序员如何提高工作效率 保持高工作效率，我觉得主要有一下4个方面，希望能对大家有帮助。 集中目标工作列表不论是开发还是设计，还是其他职业，工作列表都很重要，工作目标很明确。工作的时候才能格外专注，才不会走神。用自己最熟悉的工具（我用Evernote），把待办工作列表（今天要做什么）记录下来，很重要的一点是记录分解后的小目标（分解任务也是一个很重要的能力）。同时也保持工作中产生的新的问题（任务），经常性地调整当前工作任务列表，根据重要性对这些任务进行划分，经常想着那些最重要的问题。 专注目标专注目标不是那么容易做到的，需要学会分离与当前无关的任务/问题，工作中经常会碰到的问题可以首先寻找简单可用可靠的方案，并将心中的疑虑记录下来，集中成一个列表，工作之外翻翻书，系统思考和学习，而不会因为这个问题而叉开思路对相关的内容研究一番。总之，专注当前的任务，把新问题记录下来，回头再专心攻克。学会避繁就简，在基本功的增强后，会发现很多问题可以简单阅读或查找文档，或浏览问题相关的库的源码解决； 学会简化问题无论是在广义的工作方法/工作态度上，还是在针对具体问题上，很重要的一个个人能力就是化繁为简了。化繁为简是所有工作方法/软件设计的核心。将那些可以砍掉的工作砍掉，做到尽可能地简单。 从工作方法和态度上来讲，真正需要去做的工作才值得去做，大力砍掉那些不应该在当前工作中处理的事情。例如不必要的优化，不必要的扩展性，不必要的性能，不必要的功能，可以不要的技术，不必要的流程，不必要的文档，统统砍掉，一切可以没有的全都不能有。 工作中也可能遇到非关键的难题，通常绕过它们，使用更简单的方案就是了。纠缠于这些不重要的难题，最容易浪费时间。 从设计/实现来讲，最好的方案就是最简单直接、一眼就能看懂的方案。而且通常最简单直接的方式，通常性能也最好。 基本功基本功的内容十分复杂。第一项基本功是对整个计算机体系的理解，对操作系统/虚拟机/数据库本质的理解，对语言基础类和库的理解，这些是核心基本功。第二项基本功是学习能力。 通过快速阅读核心文档理解核心思想，然后其他的东西总是能从文档中查到就行。细枝末节的东西，即学即用，学过就忘可也。第三项基本功是文档、代码、资料的搜索和收集，技术问题建议大家用Google搜索，有意识的整理出自己的代码库。 工具选择工具核心标准，就是简单朴素可信赖，如果一个工具出几次诡异现象，那就干脆丢掉它。熟悉工具，实际上我们工作中，就是和各种各样工具打交道，各种IDE，编辑器，版本管理工具，命令行终端，TODO工具等等。要想在工作中如行云流水，一定要熟悉工具，包括工具快捷键，命令，原理等等。写自己工具，很多时候，我们需要重复的做一件事情，当你做第2遍，第3遍的时候，就应该想一想，能不能自动化，很多简单的几句shell就可以搞定，麻烦的一点的，可以先记录下来。比如，我就写了非常多的脚本：一个命令反编译APK并查看源码、提取当前版本号打git tag并提交等等。很多时候几分钟到几十分钟的事情可以压缩到几秒钟完成，也避免了对工作的打断。 前3点靠大家各自的修行，第4点工具部分，我会在博客中进一步分享。 原始链接:http://tinyxiong.com/about-effciency/关于作者：Tiny熊：深入浅出区块链博主","categories":[{"name":"心得","slug":"心得","permalink":"http://tinyxiong.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://tinyxiong.com/tags/心得/"},{"name":"工作效率","slug":"工作效率","permalink":"http://tinyxiong.com/tags/工作效率/"}]},{"title":"Linux常用命令系列 - echo命令","slug":"linux_cat","date":"2017-08-26T08:36:36.000Z","updated":"2017-12-14T13:09:26.000Z","comments":true,"path":"linux_cat/","link":"","permalink":"http://tinyxiong.com/linux_cat/","excerpt":"echo 是Linux 下最常用的命令之一，用于终端打印。","text":"echo 是Linux 下最常用的命令之一，用于终端打印。 常用用法12$ echo \"Hello Bash\" Hello Bash 小技巧： 使用转义字符 12$ echo -e \"Hello\\tBash\"Hello Bash 使用转义字符打印彩色输出，如红色打印 12$ echo -e \"\\e[1;31m Hello Bash \\e[0m\"Hello Bash \\e[1;31m 表示将颜色设置为红色 颜色编号： 30 (黑色)、31 (红色)、32 (绿色)、33 (黄色)、34 (蓝色)、35 ( 紫红色)、36 (青色)和37 (白色) \\e[0m 表示将颜色重新置回 如果要进行格式化打印可以使用printf， 如：12$ printf \"%-10s %-10s %-4.2f\\n\" Hello Bash 88.8888Hello Bash 88.89 printf更多用户用法，有兴趣的可以参考。 使用截图： 原始链接:http://tinyxiong.com/ls/关于作者：Tiny熊：深入浅出区块链博主","categories":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/categories/Linux/"},{"name":"命令","slug":"Linux/命令","permalink":"http://tinyxiong.com/categories/Linux/命令/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"http://tinyxiong.com/tags/命令/"},{"name":"echo","slug":"echo","permalink":"http://tinyxiong.com/tags/echo/"}]},{"title":"Linux常用命令系列 - ls命令","slug":"linux_ls","date":"2017-08-20T08:36:36.000Z","updated":"2017-12-14T14:55:33.000Z","comments":true,"path":"linux_ls/","link":"","permalink":"http://tinyxiong.com/linux_ls/","excerpt":"ls 是Linux 下最常用的命令之一，用于列出文件和目录。","text":"ls 是Linux 下最常用的命令之一，用于列出文件和目录。 常用用法常用参数 -l(l : list) ： 显示文件（夹）内容详情 每行是一个文件的详情1234$ ls -ldrwxr-xr-x 6 Emmett staff 204 9 4 17:18 man-rw-r--r-- 1 Emmett staff 0 12 4 22:52 test_lastestlrwxr-xr-x 1 Emmett staff 13 12 4 22:58 p_readme -&gt; ../readme.txt 每个文件的详情分别用7列来表示第1列 第一个字母 表示文件类型 d 表示目录 - 表示文件 l 表示链接剩下的9个字母表示文件权限， 以三个字母为一组（rwx），分别表示 拥有者 所有组 其他人的权限第2列 表示多少链接指向这个文件第3列 表示文件/文件夹的所有者第4列 表示文件/文件夹的所有组第5列 表示文件/文件夹大小，以字节为单位第6列 表示文件最后的修改时间第7列 表示文件名或目录名 常用参数 -lh (h : human) 易于人类阅读的文件大小:12$ ls -lh-rw-r--r--@ 1 Emmett staff 960M 12 4 23:13 G718CH.zip 常用参数 -a (a: all) 显示所有文件（用于显示隐藏文件）参数：-S (S : Size )以文件大小排序参数： -t （t: time） 修改时间排序，新的文件在前参数：-r (r: reverse) 反转顺序 组合用法想一想， 如何查看最大的5个文件？1$ ls -S | head -5 用法截图 原始链接:http://tinyxiong.com/linux_ls/关于作者：Tiny熊：深入浅出区块链博主","categories":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/categories/Linux/"},{"name":"命令","slug":"Linux/命令","permalink":"http://tinyxiong.com/categories/Linux/命令/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"http://tinyxiong.com/tags/命令/"}]},{"title":"Linux常用命令列表 - 速查手册","slug":"linux_common_cmds","date":"2017-08-01T08:36:36.000Z","updated":"2017-12-09T14:39:22.000Z","comments":true,"path":"linux_common_cmds/","link":"","permalink":"http://tinyxiong.com/linux_common_cmds/","excerpt":"本文整理了Linux最常用一些命令，方便大家速查","text":"本文整理了Linux最常用一些命令，方便大家速查 常用命令 命令 说明 ls 列出目录 ls -al 使用格式化列出隐藏文件 cd dir 进入目录dir cd 进入 home 目录 pwd 显示当前目录 mkdir dir 创建目录 dir rm file 删除文件 file rm -r dir 删除目录 dir rm -f file 强制删除 file rm -rf dir 强制删除目录 dir cp file1 file2 将 file1 复制到 file2 cp -r dir1 dir2 将 dir1 复制到 dir2; 如果 dir2 不存在则创建它 mv file1 file2 将 file1 重命名或移动到 file2; 如果file2 是已存在目录则将 file1 移动到目录 file2 中 ln -s file link 创建 file 的符号连接 link touch file 创建名file的文件 cat &gt; file 将标准输入添加到 file more file 查看 file 的内容 tail -f file 从后 10 行开始查看 file 的内容 man command 显示 command 的说明手册 ps 显示当前的活动进程 top 显示所有正在运行的进程 kill pid 杀掉进程 id pid killall proc 杀掉所有名为 proc 的进程 chmod octal file 更改 file 的权限 grep pattern files 搜索 files 中匹配 pattern 的内容 df 显示磁盘占用情况 du 显示目录空间占用情况 tar xzf file.tar.gz 使用 Gzip 解压 tar 文件 tar xjf file.tar.bz2 使用 Bzip2 解压 tar 文件 ping host ping host 并输出结果 wget file 下载 file 原始链接:http://tinyxiong.com/linux_common_cmds/关于作者：Tiny熊：深入浅出区块链博主","categories":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/categories/Linux/"},{"name":"命令","slug":"Linux/命令","permalink":"http://tinyxiong.com/categories/Linux/命令/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://tinyxiong.com/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"http://tinyxiong.com/tags/命令/"},{"name":"速查手册","slug":"速查手册","permalink":"http://tinyxiong.com/tags/速查手册/"}]}]}